// Code generated by MockGen. DO NOT EDIT.
// Source: payment-service/contracts (interfaces: PaymentService)

package mocks

import (
	io "io"
	models "payment-service/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPaymentService is a mock of PaymentService interface.
type MockPaymentService struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentServiceMockRecorder
}

// MockPaymentServiceMockRecorder is the mock recorder for MockPaymentService.
type MockPaymentServiceMockRecorder struct {
	mock *MockPaymentService
}

// NewMockPaymentService creates a new mock instance.
func NewMockPaymentService(ctrl *gomock.Controller) *MockPaymentService {
	mock := &MockPaymentService{ctrl: ctrl}
	mock.recorder = &MockPaymentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentService) EXPECT() *MockPaymentServiceMockRecorder {
	return m.recorder
}

func (m *MockPaymentService) CreatePayment(payment *models.Payment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayment", payment)
	ret0, _ := ret[0].(error)
	return ret0
}

func (mr *MockPaymentServiceMockRecorder) CreatePayment(payment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayment", reflect.TypeOf((*MockPaymentService)(nil).CreatePayment), payment)
}

func (m *MockPaymentService) GetPayment(id string) (*models.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayment", id)
	ret0, _ := ret[0].(*models.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (mr *MockPaymentServiceMockRecorder) GetPayment(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayment", reflect.TypeOf((*MockPaymentService)(nil).GetPayment), id)
}

func (m *MockPaymentService) ListPaymentsByOrder(orderID string) ([]*models.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPaymentsByOrder", orderID)
	ret0, _ := ret[0].([]*models.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (mr *MockPaymentServiceMockRecorder) ListPaymentsByOrder(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPaymentsByOrder", reflect.TypeOf((*MockPaymentService)(nil).ListPaymentsByOrder), orderID)
}

func (m *MockPaymentService) InitiateRefund(paymentID string) (*models.Refund, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitiateRefund", paymentID)
	ret0, _ := ret[0].(*models.Refund)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (mr *MockPaymentServiceMockRecorder) InitiateRefund(paymentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitiateRefund", reflect.TypeOf((*MockPaymentService)(nil).InitiateRefund), paymentID)
}

func (m *MockPaymentService) GetRefundStatus(paymentID string) (*models.Refund, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefundStatus", paymentID)
	ret0, _ := ret[0].(*models.Refund)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (mr *MockPaymentServiceMockRecorder) GetRefundStatus(paymentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefundStatus", reflect.TypeOf((*MockPaymentService)(nil).GetRefundStatus), paymentID)
}

func (m *MockPaymentService) HandleWebhook(body io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleWebhook", body)
	ret0, _ := ret[0].(error)
	return ret0
}

func (mr *MockPaymentServiceMockRecorder) HandleWebhook(body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleWebhook", reflect.TypeOf((*MockPaymentService)(nil).HandleWebhook), body)
}
