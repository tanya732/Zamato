// Code generated by MockGen. DO NOT EDIT.
// Source: payment-service/contracts (interfaces: PaymentRepository)

package mocks

import (
	models "payment-service/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPaymentRepository is a mock of PaymentRepository interface.
type MockPaymentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentRepositoryMockRecorder
}

// MockPaymentRepositoryMockRecorder is the mock recorder for MockPaymentRepository.
type MockPaymentRepositoryMockRecorder struct {
	mock *MockPaymentRepository
}

// NewMockPaymentRepository creates a new mock instance.
func NewMockPaymentRepository(ctrl *gomock.Controller) *MockPaymentRepository {
	mock := &MockPaymentRepository{ctrl: ctrl}
	mock.recorder = &MockPaymentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentRepository) EXPECT() *MockPaymentRepositoryMockRecorder {
	return m.recorder
}

func (m *MockPaymentRepository) Save(payment *models.Payment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", payment)
	ret0, _ := ret[0].(error)
	return ret0
}

func (mr *MockPaymentRepositoryMockRecorder) Save(payment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockPaymentRepository)(nil).Save), payment)
}

func (m *MockPaymentRepository) FindByID(id string) (*models.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*models.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (mr *MockPaymentRepositoryMockRecorder) FindByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockPaymentRepository)(nil).FindByID), id)
}

func (m *MockPaymentRepository) FindByOrderID(orderID string) ([]*models.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByOrderID", orderID)
	ret0, _ := ret[0].([]*models.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (mr *MockPaymentRepositoryMockRecorder) FindByOrderID(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByOrderID", reflect.TypeOf((*MockPaymentRepository)(nil).FindByOrderID), orderID)
}

func (m *MockPaymentRepository) SaveRefund(refund *models.Refund) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRefund", refund)
	ret0, _ := ret[0].(error)
	return ret0
}

func (mr *MockPaymentRepositoryMockRecorder) SaveRefund(refund interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRefund", reflect.TypeOf((*MockPaymentRepository)(nil).SaveRefund), refund)
}

func (m *MockPaymentRepository) FindRefundByPaymentID(paymentID string) (*models.Refund, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRefundByPaymentID", paymentID)
	ret0, _ := ret[0].(*models.Refund)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (mr *MockPaymentRepositoryMockRecorder) FindRefundByPaymentID(paymentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRefundByPaymentID", reflect.TypeOf((*MockPaymentRepository)(nil).FindRefundByPaymentID), paymentID)
}

func (m *MockPaymentRepository) UpdatePaymentStatus(id, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePaymentStatus", id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

func (mr *MockPaymentRepositoryMockRecorder) UpdatePaymentStatus(id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePaymentStatus", reflect.TypeOf((*MockPaymentRepository)(nil).UpdatePaymentStatus), id, status)
}
