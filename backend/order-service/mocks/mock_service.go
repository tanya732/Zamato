// Code generated by MockGen. DO NOT EDIT.
// Source: service/order_service.go

package mocks

import (
	"order-service/models"
	"reflect"

	"github.com/golang/mock/gomock"
)

type MockOrderService struct {
	ctrl     *gomock.Controller
	recorder *MockOrderServiceMockRecorder
}

type MockOrderServiceMockRecorder struct {
	mock *MockOrderService
}

func NewMockOrderService(ctrl *gomock.Controller) *MockOrderService {
	mock := &MockOrderService{ctrl: ctrl}
	mock.recorder = &MockOrderServiceMockRecorder{mock}
	return mock
}

func (m *MockOrderService) EXPECT() *MockOrderServiceMockRecorder {
	return m.recorder
}

func (m *MockOrderService) CreateOrder(userID uint, items []models.OrderItem, address string) (*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", userID, items, address)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (mr *MockOrderServiceMockRecorder) CreateOrder(userID, items, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderService)(nil).CreateOrder), userID, items, address)
}

func (m *MockOrderService) GetOrderHistory(userID uint) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderHistory", userID)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (mr *MockOrderServiceMockRecorder) GetOrderHistory(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderHistory", reflect.TypeOf((*MockOrderService)(nil).GetOrderHistory), userID)
}

func (m *MockOrderService) GetOrder(id string) (*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", id)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (mr *MockOrderServiceMockRecorder) GetOrder(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockOrderService)(nil).GetOrder), id)
}

func (m *MockOrderService) UpdateOrderStatus(id string, status models.OrderStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatus", id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

func (mr *MockOrderServiceMockRecorder) UpdateOrderStatus(id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockOrderService)(nil).UpdateOrderStatus), id, status)
}

func (m *MockOrderService) ProcessPayment(orderID string, paymentID string) error { // Updated to use string for orderID
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessPayment", orderID, paymentID)
	ret0, _ := ret[0].(error)
	return ret0
}

func (mr *MockOrderServiceMockRecorder) ProcessPayment(orderID, paymentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessPayment", reflect.TypeOf((*MockOrderService)(nil).ProcessPayment), orderID, paymentID)
}
